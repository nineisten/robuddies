advanced functions


Closures:
example: 
const l1 = () => {
	const greet = 'Hi!';
	sonst l2 = () => {
	const name = 'bobby';
	alert greet;
	} 
	return l2;
}

const newFunc = l1();
newfunc();

a funtion ran. the function executed. its never going to execute again, but its going to remember that there are references to those variables. 

the child function always references the parent function when a function is nested inside of another. The parent cannot automatically access anything from a child level.

all objects declared inside of a function only local to that function. the scope is limited to inside that function. unless declared on a global scope


Currying:

const multiply = (a,b) =>a*b;

const curriedMultiply = (a)=>(b)=> a * b;
const curriedM

curried multiply handles each argument separately so that it becomes more extensible.


the function can now be called like: curriedMultiply(a)(b);

what this does is allows you to run each argument independantly

example: const multiplyBy5 = curriedMultiply(5);

now multiplyBy5(); will multiply anything you pass through it, by 5.

example: multiply(5); will return the number 25.


Compose:
the act of putting two functions together to create a third function where the output of one fucntion is the input the other.

const compose = (f,g)=>(a)=> f(g(a));

extras:

avoid side effects
achieve functional purity

side effects are different methods and outputs of a function. console.log for example. it is a side effect. theres extra processes and code involved with rendering console.Log();
that can potentially create bugs and issues in the processes.


"Functional purity" is when you avoid side effects. your functions always return something.

Deterministic: no matter the input the output is always the same value. meaning if it is designed to multifply by 5 and return a number then thats what it will do every time.









